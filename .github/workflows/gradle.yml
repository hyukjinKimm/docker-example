name: Java CD with Gradle

on:
  push:
    branches:
      - "main"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # JDK 설정
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # application.yml 생성 및 디렉토리 생성
      - run: mkdir -p ./src/main/resources
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      - run: cat ./src/main/resources/application.yml  # 내용 확인

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
          else
            echo "gradlew file not found!"
            exit 1
          fi

      # Gradle Build (test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker 이미지 빌드
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest" .

      # DockerHub Push
      - name: DockerHub Push
        run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest"

      # EC2 인스턴스 접속 및 애플리케이션 실행
      - name: Deploy to Hosts
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.BASTION_IP}}  # Bastion Host의 IP 주소 또는 호스트 이름
          username: ${{ secrets.EC2_USERNAME}}  # Bastion Host의 사용자 이름
          key: ${{ secrets.EC2_KEY}}  # Bastion Host의 SSH 개인 키

          script: |
            # Host 1에 대한 애플리케이션 실행
            ssh -i ${{ secrets.KEY_NAME}} ${{ secrets.EC2_USERNAME}}@${{ secrets.EC2_HOST1}} << 'ENDSSH'
              cd /home/ubuntu
              rm .env
              echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
              echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
              sudo docker-compose down
              sudo docker-compose up -d
              sudo docker ps -a
            ENDSSH

            # Host 2에 대한 애플리케이션 실행
            ssh -i ${{ secrets.KEY_NAME}} ${{ secrets.EC2_USERNAME}}@${{ secrets.EC2_HOST2}} << 'ENDSSH'
              cd /home/ubuntu
              rm .env
              echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
              echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
              sudo docker-compose down
              sudo docker-compose up -d
              sudo docker ps -a
            ENDSSH
