name: Java CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    ## JDK 설정
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    ## 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v3

    ## application.yml 생성 및 디렉토리 생성
    - run: mkdir -p ./src/main/resources
    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
    - run: cat ./src/main/resources/application.yml  # 내용 확인

    # Gradle Build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: |
        if [ -f ./gradlew ]; then
          chmod +x ./gradlew
        else
          echo "gradlew file not found!"
          exit 1
        fi

    # Gradle Build (test 제외)
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # DockerHub 로그인
    - name: DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker 이미지 빌드
    - name: Build Docker image
      run: |
        echo "Building Docker image with tag: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest"
        docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest" . --platform=linux/amd64

    # DockerHub Push
    - name: DockerHub Push
      run: docker push "${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest"

    # EC2 인스턴스 접속 및 애플리케이션 실행
    - name: Application Run
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # 이전 컨테이너 종료 및 삭제
          sudo docker kill ${{ secrets.PROJECT_NAME }} || echo "No running container found."
          sudo docker rm -f ${{ secrets.PROJECT_NAME }} || echo "No container to remove."
          
          # 이전 이미지 삭제
          sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} || echo "No image to remove."
          
          # 최신 이미지 가져오기
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

          # 새로운 컨테이너 실행
          sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} -v mysql-volume:/var/lib/mysql --name ${{ secrets.PROJECT_NAME }} -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest
